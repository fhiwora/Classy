"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[613],{99571:function(e){e.exports=JSON.parse('{"functions":[{"name":"RegisterMixinFolder","desc":"Registers the folder as a valid location for finding Mixins.","params":[{"name":"folder","desc":"","lua_type":"Instance<Folder>"}],"returns":[],"function_type":"static","source":{"line":102,"path":"src/Mixins.lua"}},{"name":"RegisterMixin","desc":"Manually register a Mixin see example at the [top of the page.](#top)","params":[{"name":"mixinName","desc":"","lua_type":"string"},{"name":"mixin","desc":"","lua_type":"Dictionary"}],"returns":[],"function_type":"static","source":{"line":114,"path":"src/Mixins.lua"}},{"name":"RegisterMixinFromModule","desc":"Requires the ModuleScript passed and requiers the Mixin.","params":[{"name":"mixinModule","desc":"","lua_type":"Instance<ModuleScript>"}],"returns":[],"function_type":"static","source":{"line":127,"path":"src/Mixins.lua"}},{"name":"RegisterMultipleMixins","desc":"Registers multiple Mixins.","params":[{"name":"mixins","desc":"","lua_type":"{Dictionary}"}],"returns":[],"function_type":"static","source":{"line":143,"path":"src/Mixins.lua"}},{"name":"RegisterMultipleMixinsFromModules","desc":"Requires and registers multiple Mixin Modules.","params":[{"name":"mixinModules","desc":"","lua_type":"{Instance<ModuleScript>}"}],"returns":[],"function_type":"static","source":{"line":158,"path":"src/Mixins.lua"}},{"name":"DoesClassHaveMixin","desc":"Checks if a Class has the Mixin being checked for.","params":[{"name":"classAny","desc":"","lua_type":"string | Class"},{"name":"mixinName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","errors":[{"lua_type":"Nonexistent Class","desc":"Occurs when the Class doesn\'t exist"}],"source":{"line":177,"path":"src/Mixins.lua"}},{"name":"DoesClassHaveAnyMixins","desc":"Checks if a Class has any of the mixins passed.","params":[{"name":"classAny","desc":"","lua_type":"string | Class"},{"name":"mixins","desc":"","lua_type":"{string}"}],"returns":[{"desc":"the boolean is whether it had any of the mixins or not, the table is an array of which mixins it had","lua_type":"boolean, table"}],"function_type":"static","errors":[{"lua_type":"Nonexistent Class","desc":"Occurs when the Class doesn\'t exist"}],"source":{"line":193,"path":"src/Mixins.lua"}},{"name":"DoesClassHaveAllMixins","desc":"Checks if a Class has all the mixins passed.","params":[{"name":"classAny","desc":"","lua_type":"string | Class"},{"name":"mixins","desc":"","lua_type":"{string}"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","errors":[{"lua_type":"Nonexistent Class","desc":"Occurs when the Class doesn\'t exist"}],"source":{"line":220,"path":"src/Mixins.lua"}},{"name":"AddMixin","desc":"Adds a Mixin to a Class.","params":[{"name":"classAny","desc":"","lua_type":"string | Class"},{"name":"mixinName","desc":"","lua_type":"string"}],"returns":[],"function_type":"static","errors":[{"lua_type":"Nonexistent Class","desc":"Occurs when the Class doesn\'t exist"},{"lua_type":"Nonexistent Mixin","desc":"Occurs when the Class doesn\'t exist"},{"lua_type":"Mixin Apart of Class","desc":"Occurs when the Mixin is already apart of the Class"}],"source":{"line":251,"path":"src/Mixins.lua"}},{"name":"AddMultipleMixins","desc":"Adds multiple Mixins to a Class.","params":[{"name":"classAny","desc":"","lua_type":"string | Class"},{"name":"mixins","desc":"","lua_type":"{string}"}],"returns":[],"function_type":"static","errors":[{"lua_type":"Nonexistent Class","desc":"Occurs when the Class doesn\'t exist"},{"lua_type":"Nonexistent Mixin","desc":"Occurs when the Class doesn\'t exist"},{"lua_type":"Mixin Apart of Class","desc":"Occurs when the Mixin is already apart of the Class"}],"source":{"line":287,"path":"src/Mixins.lua"}}],"properties":[],"types":[],"name":"Mixins","desc":"This module is used to register Mixins, add Mixins to classes, and check if classes have Mixins\\n\\n### Example\\n```lua\\n    -- To register Mixins\\n    -- whenever you register a mixin folder, when adding a Mixin to a class, if the Mixin hasn\'t already been cached\\n    -- the folder registered (and every other folder registered) will be searched for the Mixin\\n    Classy.Mixins.RegisterMixinFolder(path.to.mixin.folder)\\n\\n    -- registering mixins manually\\n    local TestMixin = {}\\n\\n    function TestMixin.Add(class)\\n        assert(class.TestMethod == nil, \\"class already has a \'TestMethod\' method\\")\\n        class.TestMethod = TestMixin.TestMethod\\n    end\\n\\n    function TestMixin.TestMethod()\\n        print(\\"test\\")\\n    end\\n\\n    Classy.Mixins.RegisterMixin(\\"TestMixin\\", TestMixin)\\n\\n    -- registering a mixin in a module\\n    Classy.Mixins.RegisterMixinFromModule(path.to.module.script)\\n\\n    -- adding a mixin to a class\\n\\n    local NewClass = Classy.NewClass({\\n        ClassName = \\"New\\";\\n    }) -- you could alternatively pass the names of the Mixins you want to add as a table for the 2nd argument of the NewClass and NewSubclass methods\\n    Classy.Mixins.AddMixin(NewClass, \\"TestMixin\\")\\n\\n    -- It\'s also worth noting that passing a object of a class as the first parameter to AddMixin, will add it to the entire class, not the object itself.\\n\\n    local newObject = NewClass.new()\\n    NewClass.TestMethod()\\n    newObject.TestMethod()\\n\\n    -- you can even use mixins on any table\\n    local someTable = {}\\n    Classy.Mixins.AddMixin(someTable, \\"TestMixin\\")\\n\\n    someTable.TestMethod()\\n```","source":{"line":53,"path":"src/Mixins.lua"}}')}}]);