"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[305],{86460:function(e){e.exports=JSON.parse('{"functions":[{"name":"NewSubclass","desc":"This creates a new subclass of an already existing class.","params":[{"name":"subclassInfo","desc":"The info for the class (see [ClassInfo](#ClassInfo))","lua_type":"ClassInfo"},{"name":"superclassAny","desc":"The class that this one will be inheriting from","lua_type":"string | Class"},{"name":"mixins","desc":"A table of mixins to add","lua_type":"{string}?"}],"returns":[{"desc":"","lua_type":"Class"}],"function_type":"static","errors":[{"lua_type":"Nonexistent Superclass","desc":"Occurs when the Superclass passed doesn\'t exist"}],"source":{"line":180,"path":"src/init.lua"}},{"name":"NewClass","desc":"This creates a new class.","params":[{"name":"classInfo","desc":"The info for the class (see [ClassInfo](#ClassInfo))","lua_type":"ClassInfo"},{"name":"mixins","desc":"A table of mixins to add","lua_type":"{string}?"},{"name":"superclassAny","desc":"The class that this one will be inheriting from","lua_type":"string | Class"}],"returns":[{"desc":"","lua_type":"Class"}],"function_type":"static","source":{"line":206,"path":"src/init.lua"}},{"name":"NewObjectOfClass","desc":"This creates a object of an already existing class.","params":[{"name":"className","desc":"","lua_type":"string"},{"name":"...","desc":"this will pass any arguments you wish to pass to the [instantiation](https://dev-fyuusha.github.io/Chain/api/Class) of the class","lua_type":"tuple?"}],"returns":[{"desc":"","lua_type":"Object<Class>"}],"function_type":"static","source":{"line":234,"path":"src/init.lua"}},{"name":"GetClass","desc":"This gets a class by its class name.","params":[{"name":"className","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Class"}],"function_type":"static","errors":[{"lua_type":"Nonexistent Class","desc":"Occurs when the class couldn\'t be found"}],"source":{"line":252,"path":"src/init.lua"}}],"properties":[{"name":"Mixins","desc":"This is a reference to the Mixins table, where you can register mixins, add mixins to a class, and more.\\nFor full documentation refer to the [Mixins](https://dev-fyuusha.github.io/Chain/api/Mixins) documentation","lua_type":"Mixins","source":{"line":115,"path":"src/init.lua"}}],"types":[{"name":"ClassInfo","desc":"This is what you should be sending when creating a new class or subclass.\\nIt is to be noted, however, that you can define `terminate` and `init` outside of this table by referring to your class and defining it, like so:\\n```lua\\n    local newClass = Classy.NewClass({\\n        ClassName = \\"newClass\\"\\n    })\\n\\n    --[[\\n        it is to be noted that any arguments you pass to `new` on newClass\\n        and `Destroy` on individual objects will be passed to init and terminate respectively.\\n    --]]\\n    function newClass:init()\\n\\n    end\\n\\n    function newClass:terminate()\\n\\n    end\\n```\\n\\nYou can also define static fields in the ClassInfo.","fields":[{"name":"ClassName","lua_type":"string","desc":"The name of the class"},{"name":"terminate","lua_type":"function?","desc":"[Optional] The method that is called when destroying an object of the class"},{"name":"init","lua_type":"function?","desc":"[Optional] The method that is called when creating an object of the class"}],"source":{"line":145,"path":"src/init.lua"}}],"name":"Classy","desc":"This is the top level of Classy, where you access everything you need to create classes.  \\nClassy is a library to make it easier to create classes and make them easier to read.  \\nClassy has the ability to create subclasses and add Mixins for component based programming.\\n\\n### Restricted Keywords\\n- Super\\n- new\\n- Destroy\\n- _mixins\\n- _internallyDestroyed\\n- _isInternallyDestroyed\\n- _isObject\\n\\nThese keywords are used internally by Classy for managing your classes.  \\nYou\'re allowed to use and access these fields and methods of your classes, the only exceptions are `_isInternallyDestroyed` and `_internallyDestroyed` (it is already used internally when `Destroy` is called).  \\nTo learn more about these keywords, please read the documentation for [Class](https://dev-fyuusha.github.io/Chain/api/Class).\\n\\n### Example\\n```lua\\n-- Simple class and subclass\\nlocal Car = Classy.NewClass({\\n    ClassName = \\"Car\\";\\n\\n    init = function(self, maxSpeed, color)\\n        self.MaxSpeed = maxSpeed or 32\\n        self.Color = color or Color3.fromRGB(255, 0, 0)\\n\\n        print(\\"car initialized\\")\\n    end;\\n\\n    terminate = function(self)\\n        print(\\"car destroyed\\")\\n    end;\\n\\n    Honk = function(self)\\n        print(self.ClassName, \\"BEEP\\")\\n    end;\\n})\\n\\nlocal greenCar = Car.new(120, Color3.fromRGB(0, 255, 0))\\ngreenCar:Honk()\\n\\nlocal Truck = Classy.NewSubclass({\\n    ClassName = \\"Truck\\";\\n}, \\"Car\\") -- you could also alternatively pass the class itself\\n\\nfunction Truck:init(maxSpeed, color, tireAmount)\\n    self.TireAmount = tireAmount\\n    print(\\"truck initialized\\")\\nend\\n\\nfunction Truck:terminate()\\n    print(\\"truck destroyed\\")\\nend\\n\\nlocal semiTruck = Truck.new(90, Color3.fromRGB(0, 0, 255), 18)\\nsemiTruck:Honk()\\n\\ngreenCar:Destroy()\\nsemiTruck:Destroy()\\n\\nlocal pickupTruck = Classy.NewObjectOfClass(\\"Truck\\", 140, Color3.fromRGB(255, 0, 255), 4)\\npickupTruck:Honk()\\npickupTruck:Destroy()\\n\\n\\n-- Mixin Addition\\n-- With Mixins you can have them automatically picked up by Classy by putting them in the ClassMixins folder as Module Scripts\\n-- For more information on Mixins and how to use them check the Mixins ModuleScript\\nlocal VehicleBoostMixin = {}\\n\\n\\nfunction VehicleBoostMixin.Add(class)\\n    assert(class.Boost == nil, \\"class already has a \'Boost\' method\\")\\n    class.Boost = VehicleBoostMixin.Boost\\nend\\n\\n\\nfunction VehicleBoostMixin:Boost()\\n    local oldMaxSpeed = self.MaxSpeed\\n    self.MaxSpeed = oldMaxSpeed * 2\\n    print(\\"VROOOOOOMMM\\")\\n    task.delay(1, function()\\n        self.MaxSpeed = oldMaxSpeed\\n    end)\\nend\\n\\nClassy.Mixins.RegisterMixin(\\"VehicleBoostMixin\\", VehicleBoostMixin)\\n\\n-- In another Script\\nlocal fastCar = Car.new(160, Color3.fromRGB(255, 255, 255))\\n\\n-- you could alternatively pass the names of the Mixins you want to add as a table for the 2nd argument of the NewClass and NewSubclass methods\\nClassy.Mixins.AddMixin(Car, \\"VehicleBoostMixin\\") -- you can even use this on a regular table\\n\\n-- It\'s also worth noting that passing a object of a class as the first parameter to AddMixin, will add it to the entire class, not the object itself.\\n\\nfastCar:Boost()\\nfastCar:Destroy()\\n```","source":{"line":108,"path":"src/init.lua"}}')}}]);